apply plugin: 'java'
apply plugin: 'eclipse'

repositories {
  mavenCentral()
}


dependencies {
    compile 'commons-cli:commons-cli:1.2'
    compile 'commons-codec:commons-codec:1.8'
    compile 'org.apache.commons:commons-math3:3.2'
    compile 'org.jfree:jfreechart:1.0.15'
    compile 'net.sf.jung:jung-graph-impl:2.0.1'
    compile 'net.sf.jung:jung-visualization:2.0.1'
    compile 'org.picocontainer:picocontainer:2.14.3'
    compile 'com.google.code.gson:gson:2.2.4'
    compile('net.sf.jgap:jgap:3.4.4') {
        exclude group: 'xerces'
    }
    // compile fileTree(dir: 'lib', include: '*.jar')
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Preferanto Experiments' /*, 'Main-Class': 'org.preferanto.experiment.Main'*/
    }
}

task runSelectivitySolver(type: JavaExec, dependsOn: [jar], 
  description: """Starts the PreferantoSelectivitySolver program, which finds preferanto configurations
                          with selectivites 0.1, 0.2, ..., 0.9 for a given objectiveCount.
                          Expected parameters: provider objCount [startSel].
                          Accepted values for provider: domination, relation, front
                          Example:
                              gradlew runSelectivitySolver -Pprovider=relation -PobjCount=5""") {
    main = "org.preferanto.experiment.selectivity.PreferantoSelectivitySolver"
    jvmArgs = ["-server", "-Xmx128m", "-XX:MaxPermSize=1280m"]
    if(project.hasProperty("provider") && project.hasProperty("objCount")) {
      if(project.hasProperty("startSel")) {
        args = [provider, objCount, objCount, 1, startSel]
      } else {
        args = [provider, objCount]
      }
    }
    classpath = sourceSets.main.runtimeClasspath
}

task runReferenceSetGenerator(type: JavaExec, dependsOn: [jar], 
  description: """Starts the DefaultReferenceSetGenerator program, which generates reference sets
                          for the preferanto configurations.
                          Expected parameters: provider, objCount.
                          Accepted values for provider: domination, relation, front
                          Example:
                              gradlew runReferenceSetGenerator -Pprovider=relation -PobjCount=5""") {
    main = "org.preferanto.experiment.impact.DefaultReferenceSetGenerator"
    jvmArgs = ["-server", "-Xmx128m", "-XX:MaxPermSize=1280m"]
    if(project.hasProperty("provider") && project.hasProperty("objCount")) {
      args = [provider, objCount]
    }
    classpath = sourceSets.main.runtimeClasspath
}


task runImpactCalculator(type: JavaExec, dependsOn: [jar], 
  description: """Starts the ImpactCalculator program, which calculates
                          the impact of different selectivities for a given objectiveCount.
                          Expected parameter: objCount
                          Example:
                              gradlew runImpactCalculator -PobjCount=5""") {
    main = "org.preferanto.experiment.impact.ImpactCalculator"
    jvmArgs = ["-server", "-Xmx1024m", "-XX:MaxPermSize=256m"]
    if(project.hasProperty("objCount")) {
      args = [objCount]
    }
    classpath = sourceSets.main.runtimeClasspath
}


eclipse.classpath.file {
    whenMerged { classpath ->
        classpath.entries.each { entry ->
          if(entry.kind == 'lib') {
            def pattern = ".*/projects/${project.name}/lib/(.*)\\.jar"
            def m = (entry.path =~ pattern)
            if(m.matches()) {
              entry.sourcePath = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory().fromPath("lib-src/${m[0][1]}-sources.jar")
            }
          }
        }
    }
}
